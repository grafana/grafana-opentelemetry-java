group 'com.grafana'
version '10.0.0-SNAPSHOT' // the version of the actual release is set during the release process in build-release.sh

buildscript {
  ext {
    otelInstrumentationVersion = "2.12.0"
  }
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "com.diffplug.spotless:spotless-plugin-gradle:7.0.2"
    classpath "com.gradleup.shadow:shadow-gradle-plugin:8.3.5"
    classpath "io.opentelemetry.instrumentation:gradle-plugins:${otelInstrumentationVersion}-alpha"
  }
}

subprojects {
  version = rootProject.version

  apply plugin: "java"
  apply plugin: "com.diffplug.spotless"

  ext {
    versions = [
      opentelemetryJavaagent     : otelInstrumentationVersion,
      opentelemetryJavaagentAlpha: "${otelInstrumentationVersion}-alpha",

      bytebuddy                  : "1.16.0",
      autoservice                : "1.1.1",
      junit                      : "5.11.4",
      logUnit                    : "2.0.0",
      assertj                    : "3.27.3",
    ]

    deps = [
      bytebuddy  : "net.bytebuddy:byte-buddy-dep:${versions.bytebuddy}",
      autoservice: [
        "com.google.auto.service:auto-service:${versions.autoservice}",
        "com.google.auto.service:auto-service-annotations:${versions.autoservice}",
      ]
    ]
  }

  repositories {
    mavenCentral()
  }

  spotless {
    java {
      googleJavaFormat()
      licenseHeaderFile(rootProject.file("buildscripts/spotless.license.java"), "(package|import|public)")
      target("src/**/*.java")
    }

    format 'misc', {
      // not using "**/..." to help keep spotless fast
      target(
        ".gitignore",
        ".gitattributes",
        ".gitconfig",
        ".editorconfig",
        "*.md",
        "src/**/*.md",
        "docs/**/*.md",
        "*.sh",
        "src/**/*.properties",
      )
      indentWithSpaces()
      trimTrailingWhitespace()
      endWithNewline()
    }
  }

  dependencies {
    // these serve as a test of the instrumentation boms
    implementation(platform("io.opentelemetry.instrumentation:opentelemetry-instrumentation-bom-alpha:${versions.opentelemetryJavaagentAlpha}"))

    testImplementation("org.assertj:assertj-core:${versions.assertj}")

    testImplementation(enforcedPlatform("org.junit:junit-bom:${versions.junit}"))
    testImplementation("org.junit.jupiter:junit-jupiter-api:${versions.junit}")
    testImplementation("org.junit.jupiter:junit-jupiter-params:${versions.junit}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${versions.junit}")

    testImplementation("io.github.netmikey.logunit:logunit-core:${versions.logUnit}")
    testRuntimeOnly("io.github.netmikey.logunit:logunit-jul:${versions.logUnit}")
  }

  tasks {
    test {
      useJUnitPlatform()
    }

    compileJava {
      options.release.set(8)
      options.compilerArgs.addAll(["-Werror", "-Xlint:-options"]) //Java 8 is deprecated as of JDK 21
    }
    compileTestJava {
      options.release.set(17)
    }
  }
}
