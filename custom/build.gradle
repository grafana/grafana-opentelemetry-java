plugins {
  id "java"
  id "org.owasp.dependencycheck" version "9.0.8"
}

apply from: "$rootDir/gradle/checkstyle.gradle"

dependencies {
  compileOnly("io.opentelemetry:opentelemetry-sdk")
  compileOnly("io.opentelemetry.semconv:opentelemetry-semconv")
  compileOnly("io.opentelemetry:opentelemetry-sdk-extension-autoconfigure-spi")
  compileOnly("io.opentelemetry.javaagent:opentelemetry-javaagent-extension-api")
  compileOnly("io.opentelemetry.javaagent:opentelemetry-javaagent-tooling")
  implementation("io.opentelemetry.contrib:opentelemetry-aws-resources:1.32.0-alpha") {
    exclude group: "io.opentelemetry", module: "opentelemetry-api"
    exclude group: "io.opentelemetry", module: "opentelemetry-sdk"
    exclude group: "io.opentelemetry.semconv", module: "opentelemetry-semconv"
  }

  testImplementation("io.opentelemetry.semconv:opentelemetry-semconv")
  testImplementation("io.opentelemetry:opentelemetry-sdk-extension-autoconfigure-spi")
}

dependencyCheck {
  skipConfigurations = ["checkstyle", "annotationProcessor"]
  suppressionFile = "buildscripts/dependency-check-suppressions.xml"
  failBuildOnCVSS = 7.0f // fail on high or critical CVE
}

def updateGeneratedFile(file, newContent) {
  if (System.getenv("CHECK_GENERATED_FILES") == "true") {
    def oldContent = file.text
    if (oldContent != newContent) {
      throw new GradleException("File ${file} was modified in CI. Please update it locally and commit.")
    }
  } else {
    project.mkdir(file.parent)
    file.text = newContent
  }
}

task manageVersionClass() {
  doLast {
    updateGeneratedFile(new File("${projectDir}/src/main/java/com/grafana/extensions/resources/internal", "DistributionVersion.java"),
      """/*
 * Copyright Grafana Labs
 * SPDX-License-Identifier: Apache-2.0
 */

package com.grafana.extensions.resources.internal;

// This class is generated by custom/build.gradle.  Do not edit.

public class DistributionVersion {

  public static final String VERSION = "$version";
}
""")
  }
}

task manageTestedInstrumentationsClass() {
  doLast {
    def instrumentations = new File("${projectDir}/../README.md").text.split("\n")
      .dropWhile { !it.startsWith("| ID") }
      .takeWhile { it.startsWith("|") }
      .drop(2)
      .collect { "          \"${it.split("\\|")[1].trim()}\"" }
      .join(",\n")

    updateGeneratedFile(new File("${projectDir}/src/main/java/com/grafana/extensions/instrumentations", "Instrumentations.java"), """/*
 * Copyright Grafana Labs
 * SPDX-License-Identifier: Apache-2.0
 */

package com.grafana.extensions.instrumentations;

// This class is generated from README.md in custom/build.gradle.  Do not edit.

import java.util.Arrays;
import java.util.List;

public class Instrumentations {

  public static final List<String> TESTED_INSTRUMENTATIONS =
      Arrays.asList(
$instrumentations);
}
""")
  }
}

task manageDefaultMetricsClass() {
  doLast {
    def metrics = new File("${projectDir}/../README.md").text.split("\n")
      .dropWhile { !it.startsWith("| Metric") }
      .takeWhile { it.startsWith("|") }
      .drop(2)
      .collect { "          \"${it.split("\\|")[1].trim()}\"" }
      .join(",\n")

    updateGeneratedFile(new File("${projectDir}/src/main/java/com/grafana/extensions/filter", "DefaultMetrics.java"), """/*
 * Copyright Grafana Labs
 * SPDX-License-Identifier: Apache-2.0
 */

package com.grafana.extensions.filter;

// This class is generated from README.md in custom/build.gradle.  Do not edit.

import java.util.Arrays;
import java.util.List;

public class DefaultMetrics {

  public static final List<String> DEFAULT_METRICS =
      Arrays.asList(
$metrics);
}
""")
  }
}

compileJava.dependsOn(manageVersionClass, manageTestedInstrumentationsClass, manageDefaultMetricsClass)

